{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject,\n    _templateObject2,\n    _templateObject3,\n    _jsxFileName = \"C:\\\\Users\\\\alsue\\\\Programming\\\\Mobile\\\\project_pharm\\\\src\\\\components\\\\DarkModeButton.js\";\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components/native\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DarkModeAction } from \"../actions\";\nimport { dark, light } from \"../theme\";\nvar Container = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  flex-direction: row;\\n  padding: 10px 0;\\n  padding-left: 10px;\\n\"])));\nvar SwitchContainer = styled.View(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  flex: 1;\\n  flex-direction: row-reverse\\n  align-items: center;\\n  justify-content: flex-start;\\n  \"])));\nvar Content = styled.Text(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n  color: \", \";\\n  font-size: 20px;\\n  align-self: flex-start;\\n\"])), function (_ref) {\n  var theme = _ref.theme;\n  return theme.text;\n});\n\nfunction DarkModeButton(_ref2) {\n  var content = _ref2.content;\n  var dispatch = useDispatch();\n  var theme = darkmode ? dark : light;\n\n  function toggleSwitch() {\n    dispatch(DarkModeAction());\n  }\n\n  var darkmode = useSelector(function (state) {\n    return state.settingInfo.darkmode;\n  });\n  return React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, content), React.createElement(SwitchContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, React.createElement(Switch, {\n    trackColor: {\n      false: theme.toggleBarUnactivated,\n      true: theme.toggleBarActivated\n    },\n    thumbColor: theme.toggle,\n    ios_backgroundColor: \"#3e3e3e\",\n    onValueChange: toggleSwitch,\n    value: darkmode,\n    style: {\n      marginLeft: 4,\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default DarkModeButton;\nDarkModeButton.defaultprops = {\n  isEnabled: false\n};","map":{"version":3,"sources":["C:/Users/alsue/Programming/Mobile/project_pharm/src/components/DarkModeButton.js"],"names":["React","useState","styled","useDispatch","useSelector","DarkModeAction","dark","light","Container","View","SwitchContainer","Content","Text","theme","text","DarkModeButton","content","dispatch","darkmode","toggleSwitch","state","settingInfo","false","toggleBarUnactivated","true","toggleBarActivated","toggle","marginLeft","alignItems","defaultprops","isEnabled"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT;AACA,SAASC,IAAT,EAAeC,KAAf;AAEA,IAAMC,SAAS,GAAGN,MAAM,CAACO,IAAV,+IAAf;AAMA,IAAMC,eAAe,GAAGR,MAAM,CAACO,IAAV,mLAArB;AAOA,IAAME,OAAO,GAAGT,MAAM,CAACU,IAAV,8IACF;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,IAArB;AAAA,CADE,CAAb;;AAOA,SAASC,cAAT,QAAqC;AAAA,MAAXC,OAAW,SAAXA,OAAW;AACnC,MAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAEA,MAAMU,KAAK,GAAGK,QAAQ,GAAGZ,IAAH,GAAUC,KAAhC;;AAEA,WAASY,YAAT,GAAwB;AACtBF,IAAAA,QAAQ,CAACZ,cAAc,EAAf,CAAR;AACD;;AAED,MAAMa,QAAQ,GAAGd,WAAW,CAAC,UAACgB,KAAD,EAAW;AACtC,WAAOA,KAAK,CAACC,WAAN,CAAkBH,QAAzB;AACD,GAF2B,CAA5B;AAIA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUF,OAAV,CADF,EAEE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,UAAU,EAAE;AACVM,MAAAA,KAAK,EAAET,KAAK,CAACU,oBADH;AAEVC,MAAAA,IAAI,EAAEX,KAAK,CAACY;AAFF,KADd;AAKE,IAAA,UAAU,EAAEZ,KAAK,CAACa,MALpB;AAME,IAAA,mBAAmB,EAAC,SANtB;AAOE,IAAA,aAAa,EAAEP,YAPjB;AAQE,IAAA,KAAK,EAAED,QART;AASE,IAAA,KAAK,EAAE;AACLS,MAAAA,UAAU,EAAE,CADP;AAELC,MAAAA,UAAU,EAAE;AAFP,KATT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF;AAqBD;;AAED,eAAeb,cAAf;AAEAA,cAAc,CAACc,YAAf,GAA8B;AAC5BC,EAAAA,SAAS,EAAE;AADiB,CAA9B","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components/native\";\r\nimport { Switch } from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { DarkModeAction } from \"../actions\";\r\nimport { dark, light } from \"../theme\";\r\n\r\nconst Container = styled.View`\r\n  flex-direction: row;\r\n  padding: 10px 0;\r\n  padding-left: 10px;\r\n`;\r\n\r\nconst SwitchContainer = styled.View`\r\n  flex: 1;\r\n  flex-direction: row-reverse\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  `;\r\n\r\nconst Content = styled.Text`\r\n  color: ${({ theme }) => theme.text};\r\n  font-size: 20px;\r\n  align-self: flex-start;\r\n`;\r\n\r\n/// function start\r\nfunction DarkModeButton({ content }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const theme = darkmode ? dark : light;\r\n\r\n  function toggleSwitch() {\r\n    dispatch(DarkModeAction());\r\n  }\r\n\r\n  const darkmode = useSelector((state) => {\r\n    return state.settingInfo.darkmode;\r\n  });\r\n  ///rendering start\r\n  return (\r\n    <Container>\r\n      <Content>{content}</Content>\r\n      <SwitchContainer>\r\n        <Switch\r\n          trackColor={{\r\n            false: theme.toggleBarUnactivated,\r\n            true: theme.toggleBarActivated,\r\n          }}\r\n          thumbColor={theme.toggle}\r\n          ios_backgroundColor=\"#3e3e3e\"\r\n          onValueChange={toggleSwitch}\r\n          value={darkmode}\r\n          style={{\r\n            marginLeft: 4,\r\n            alignItems: \"center\",\r\n          }}\r\n        />\r\n      </SwitchContainer>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default DarkModeButton;\r\n\r\nDarkModeButton.defaultprops = {\r\n  isEnabled: false,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}